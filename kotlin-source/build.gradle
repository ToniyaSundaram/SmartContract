repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://dl.bintray.com/kotlin/exposed' }
    maven { url 'https://jitpack.io' }
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

sourceSets {
    main {
        resources {
            srcDir "../config/dev"
        }
    }
    test {
        resources {
            srcDir "../config/test"
        }
    }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-reflect:1.1.0"
    testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testCompile "junit:junit:$junit_version"

    // Corda integration dependencies
    cordaCompile "net.corda:corda-core:$corda_release_version"
    cordaCompile "net.corda:corda-finance:$corda_release_version"
    cordaCompile "net.corda:corda-jackson:$corda_release_version"
    cordaCompile "net.corda:corda-rpc:$corda_release_version"
    cordaCompile "net.corda:corda-webserver-impl:$corda_release_version"
    cordaRuntime "net.corda:corda:$corda_release_version"
    cordaRuntime "net.corda:corda-webserver:$corda_release_version"

    testCompile "net.corda:corda-node-driver:$corda_release_version"

    // PlantUML: For the generation of sequence diagrams of the flows
    compile 'net.sourceforge.plantuml:plantuml:8039'

    // CorDapp dependencies
    // Specify your cordapp's dependencies below, including dependent CorDapps


    cordapp "net.corda:corda-finance:$corda_release_version"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        languageVersion = "1.1"
        apiVersion = "1.1"
        jvmTarget = "1.8"
        javaParameters = true   // Useful for reflection.
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"
    networkMap "O=Controller,L=London,C=GB"
    node {
        name "O=Controller,L=London,C=GB"
        advertisedServices = ["corda.notary.validating"]
        p2pPort 10002
        rpcPort 10003
        cordapps = [
                "com.template:states-and-contracts:$version",
                "com.template:other-sources:$version",
                "net.corda:corda-finance:$corda_release_version"
        ]
    }
    node {
        name "O=InitiatorCognizant,L=London,C=GB"
        advertisedServices = []
        p2pPort 10004
        rpcPort 10006
        webPort 10007
        h2Port 59002
        cordapps = [
                "com.template:states-and-contracts:$version",
                "com.template:other-sources:$version",
                "net.corda:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }
    node {
        name "O=AuthorizerCognizant,L=New York,C=US"
        advertisedServices = []
        p2pPort 10008
        rpcPort 10009
        webPort 10010
        h2Port 59003
        cordapps = [
                "com.template:states-and-contracts:$version",
                "com.template:other-TacticalCustomersources:$version",
                "net.corda:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }

    node {
        name "O=TacticalCustomer,L=Paris,C=FR"
        advertisedServices = []
        p2pPort 10011
        rpcPort 10012
        webPort 10013
        h2Port 59004
        cordapps = [
                "com.template:states-and-contracts:$version",
                "com.template:other-sources:$version",
                "net.corda:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }

    node {
        name "O=OperationalCustomer,L=Paris,C=FR"
        advertisedServices = []
        p2pPort 10014
        rpcPort 10015
        webPort 10016
        h2Port 59005
        cordapps = [
                "com.template:states-and-contracts:$version",
                "com.template:other-sources:$version",
                "net.corda:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }

    node {
        name "O=StrategicCognizant,L=London,C=GB"
        advertisedServices = []
        p2pPort 10017
        rpcPort 10018
        webPort 10019
        h2Port 59006
        cordapps = [
                "com.template:states-and-contracts:$version",
                "com.template:other-sources:$version",
                "net.corda:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }

    node {
        name "O=StrategicCustomer,L=Paris,C=FR"
        advertisedServices = []
        p2pPort 10020
        rpcPort 10021
        webPort 10022
        h2Port 59007
        cordapps = [
                "com.template:states-and-contracts:$version",
                "com.template:other-sources:$version",
                "net.corda:corda-finance:$corda_release_version"
        ]
        rpcUsers = [[ user: "user1", "password": "test", "permissions": []]]
    }


}

task runTemplateClient(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.template.ClientKt'
    args 'localhost:10006'
}